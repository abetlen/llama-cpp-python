# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.5, generator: @autorest/python@6.4.15)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
from typing import IO, Any, Callable, Dict, Optional, TypeVar, Union, overload

from azure.core.exceptions import (ClientAuthenticationError,
                                   HttpResponseError, ResourceExistsError,
                                   ResourceNotFoundError,
                                   ResourceNotModifiedError, map_error)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ...operations._create_operations import (
    build_chat_completion_v1_chat_completions_post_request,
    build_completion_v1_completions_post_request,
    build_embedding_v1_embeddings_post_request)

T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]


class CreateOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~llama_cpp.client.aio.LlamaCppPythonAPI`'s
        :attr:`create` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @overload
    async def completion_v1_completions_post(
        self,
        body: _models.CreateCompletionRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Completion, _models.HTTPValidationError]:
        """Create Completion.

        Create Completion.

        :param body: Required.
        :type body: ~llama_cpp.client.models.CreateCompletionRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Completion or HTTPValidationError
        :rtype: ~llama_cpp.client.models.Completion or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def completion_v1_completions_post(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.Completion, _models.HTTPValidationError]:
        """Create Completion.

        Create Completion.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Completion or HTTPValidationError
        :rtype: ~llama_cpp.client.models.Completion or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def completion_v1_completions_post(
        self, body: Union[_models.CreateCompletionRequest, IO], **kwargs: Any
    ) -> Union[_models.Completion, _models.HTTPValidationError]:
        """Create Completion.

        Create Completion.

        :param body: Is either a CreateCompletionRequest type or a IO type. Required.
        :type body: ~llama_cpp.client.models.CreateCompletionRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: Completion or HTTPValidationError
        :rtype: ~llama_cpp.client.models.Completion or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[
            Union[_models.Completion, _models.HTTPValidationError]
        ] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "CreateCompletionRequest")

        request = build_completion_v1_completions_post_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("Completion", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def embedding_v1_embeddings_post(
        self,
        body: _models.CreateEmbeddingRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Embedding, _models.HTTPValidationError]:
        """Create Embedding.

        Create Embedding.

        :param body: Required.
        :type body: ~llama_cpp.client.models.CreateEmbeddingRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Embedding or HTTPValidationError
        :rtype: ~llama_cpp.client.models.Embedding or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def embedding_v1_embeddings_post(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.Embedding, _models.HTTPValidationError]:
        """Create Embedding.

        Create Embedding.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Embedding or HTTPValidationError
        :rtype: ~llama_cpp.client.models.Embedding or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def embedding_v1_embeddings_post(
        self, body: Union[_models.CreateEmbeddingRequest, IO], **kwargs: Any
    ) -> Union[_models.Embedding, _models.HTTPValidationError]:
        """Create Embedding.

        Create Embedding.

        :param body: Is either a CreateEmbeddingRequest type or a IO type. Required.
        :type body: ~llama_cpp.client.models.CreateEmbeddingRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: Embedding or HTTPValidationError
        :rtype: ~llama_cpp.client.models.Embedding or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[
            Union[_models.Embedding, _models.HTTPValidationError]
        ] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "CreateEmbeddingRequest")

        request = build_embedding_v1_embeddings_post_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("Embedding", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def chat_completion_v1_chat_completions_post(
        self,
        body: _models.CreateChatCompletionRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.ChatCompletion, _models.HTTPValidationError]:
        """Create Chat Completion.

        Create Chat Completion.

        :param body: Required.
        :type body: ~llama_cpp.client.models.CreateChatCompletionRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ChatCompletion or HTTPValidationError
        :rtype: ~llama_cpp.client.models.ChatCompletion or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def chat_completion_v1_chat_completions_post(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.ChatCompletion, _models.HTTPValidationError]:
        """Create Chat Completion.

        Create Chat Completion.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ChatCompletion or HTTPValidationError
        :rtype: ~llama_cpp.client.models.ChatCompletion or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def chat_completion_v1_chat_completions_post(
        self, body: Union[_models.CreateChatCompletionRequest, IO], **kwargs: Any
    ) -> Union[_models.ChatCompletion, _models.HTTPValidationError]:
        """Create Chat Completion.

        Create Chat Completion.

        :param body: Is either a CreateChatCompletionRequest type or a IO type. Required.
        :type body: ~llama_cpp.client.models.CreateChatCompletionRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: ChatCompletion or HTTPValidationError
        :rtype: ~llama_cpp.client.models.ChatCompletion or ~llama_cpp.client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[
            Union[_models.ChatCompletion, _models.HTTPValidationError]
        ] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "CreateChatCompletionRequest")

        request = build_chat_completion_v1_chat_completions_post_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("ChatCompletion", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
